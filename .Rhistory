sample(1:sides, dice, replace=TRUE)
y <- sample(1:sides, dice, replace=TRUE)
y
sum(y)
nd6 <- function(dice = 3, sides = 6){
return(sum(sample(1:sides, dice, replace = TRUE)))
}
nd6(2,3)
?rep
?repeat
?
help(repeat)
?replicate
x <- replicate(50, nd6(2,3))
x
table(x)
x <- replicate(10000, nd6(3,6))
plot(x)
table(x)
hist(x)
set.seed(1)
?replicate
source('~/code/RPG/kitt_dice.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(dist.3d6)
hist(dist.3d6)
dist.3d6 <- replicate(100000, ndk(3, 6))
hist(dist.3d6)
library(ggplot2)
g <- ggplot(data = dist.3d6)
?ggplot
g <- ggplot(dist.3d6)
df.3d6 <- as.data.frame(dist.3d6)
g <- ggplot(df.3d6)
head(df.3d6)
head(df.3d6, 10)
g + geom_histogram()
g + geom_histogram(aes(x=dist.3d6))
g + geom_histogram(aes(x=dist.3d6, binwidth = x))
g + geom_histogram(aes(x=dist.3d6), binwidth = dist.3d6)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.5)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.75)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=1)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
geom_density(aplha=.5)
geom_density(aes(x=dist.3d6)aplha=.5)
geom_density(aes(x=dist.3d6),aplha=.5)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
geom_density(aes(x=dist.3d6),aplha=.5)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
geom_density(aes(x=dist.3d6, y=..density..))
mean(df.3d6[2])
mean(df.3d6[,2])
mean(df.3d6[1])
mean(df.3d6[,1])
mean(df.3d6)
names(df.3d6)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
stat_function(fun="dnorm", args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(x=dist.3d6), binwidth=.25) +
stat_function(fun="dnorm", args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=.25) +
stat_function(fun="dnorm", args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
?geom_histogram
?linetype
?stat_density
g + geom_histogram(aes(x=dist.3d6), binwidth=.25)
g + geom_histogram(aes(x=dist.3d6), binwidth=1)
g + geom_histogram(aes(x=dist.3d6), binwidth=1, y=..density..)
g + geom_histogram(aes(x=dist.3d6, y=..density..), binwidth=1)
g <- ggplot(df.3d6, aes(x=dist.3d6))
g + geom_histogram(aes(y=..density..), binwidth=1)
geom_density()
g + geom_histogram(aes(y=..density..), binwidth=1) +
geom_density()
?dnorm
g + geom_histogram(aes(y=..density..), binwidth=1) +
stat_function(fun=dnorm, args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(y=..density..), binwidth=.5) +
stat_function(fun=dnorm, args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
g + geom_histogram(aes(y=..density..), binwidth=1) +
stat_function(fun=dnorm, args=list(mean=mean(df.3d6$dist.3d6),
sd=sd(df.3d6$dist.3d6)))
dice.pr(1, 1, 20, 20)
mean(df.3d6$dist.3d6)
dice.pr
dice.pr(1, 3, 10, 20)
dice.pr(1, 1, 10, 20)
dice.pr(1, 1, 15, 20)
dice.pr(1, 3, 15, 20)
dice.pr(1, 4, 15, 20)
dice.pr(1, 5, 15, 20)
dice.pr(1, 1, 5, 20)
dice.pr(1, 1, 10, 20)
dice.pr(1, 1, 20, 20)
dice.pr(1, 1, 15, 20)
dice.pr(2, 3, 10, 20)
ndk(1,20)
ndk(1,20)
ndk(1,20)
ndk(1,20)
sample(1:52, 3)
sample(1:52, 3, replace=FALSE)
sample(1:52, 5, replace=FALSE)
source('~/code/RPG/kitt_dice.R', echo=TRUE)
dice.pr(3, 4, 10, 20)
dice.pr(1, 4, 10, 20)
dice.pr(1, 4, 15, 20)
dice.pr(1, 4, 15, 20)
dice.pr(1, 1, 15, 20)
dice.pr(1, 1, 10, 20)
dice.pr(1, 1, 15, 20)
dice.pr(1, 4, 10, 20)
?geom_histogram
2/54
1/20
library(xlsx)
url2 <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url2, "ngap.xlsx")
source('~/code/coursera/gacd/quiz1.R', echo=TRUE)
?read.xlsx
?colIndex
dat <- read.xlsx("ngap.xlsx", startRow=18, endRow=23, colIndex=c(7:15))
dat <- read.xlsx("ngap.xlsx", sheetIndex=1,
startRow=18, endRow=23, colIndex=c(7:15))
ls()
dat <- read.xlsx("ngap.xlsx")
download.file(url2, "ngap.xlsx", method="curl")
get_wd()
wetwd()
getwd()
download.file(url2, "ngap.xlsx", method="curl", mode="wb")
download.file(url2, "ngap.xlsx", mode="wb")
dat <- read.xlsx("ngap.xlsx")
dat <- read.xlsx("ngap.xlsx", sheetIndex=1)
dat <- read.xlsx("ngap.xlsx", sheetIndex=1, startRow=18, endRow=23,
colIndex=c(7:15))
sum(dat$Zip*dat$Ext,na.rm=T)
url3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(url3, "rest.xml", mode="wb")
library(XML)
install.packages("XML")
tree <- xmlTreeParse(url3, useInternal=T)
library(XML)
tree <- xmlTreeParse(url3, useInternal=T)
tree <- xmlTreeParse(url3, useInternal=T, isURL=T)
tree <- xmlTreeParse("rest.xml", useInternal=T)
head(tree)
xmlRoot(tree)
xmlName(tree)
rnode <- xmlRoot(tree)
xmlName(root)
xmlName(rnode)
names(rnode)
rnode
xmlSApply(rnode, table(zipcode))
names(rnode)
names(rnode[row])
names(rnode["row"])
names(rnode)[1]
names(rnode)[1][1]
rnode[1][1]
xmlValue(rnode)
xmlChildren(rnode)
names(rnode[[1]])
names(rnode[[1]][["zipcode"]])
tgt <- rnode[[1]][["zipcode"]]
names(rnode[[1]])
names(rnode[[1]][["row"]])
tgt <- rnode[[1]][["row"]]
names(tgt[["zipcode"]])
xmlValue(tgt[["zipcode"]])
table(xmlSApply(tgt, function(x) xmlSApply(x, xmlValue)))
xmlSApply(tgt, function(x) xmlSApply(x, xmlValue))
xmlSApply(tgt[["zipcode"]], function(x) xmlSApply(x, xmlValue))
xmlSApply(tgt[["zipcode"]][["text"]], function(x) xmlSApply(x, xmlValue))
xmlSApply(tgt[["zipcode"]][["text"]], xmlValue())
xmlSApply(tgt[["zipcode"]][["text"]], function(x) xmlValue(x))
tgt
names(rnode)
names(rnode[[1]])
names(rnode[[1]][["row"]])
names(rnode[[1]]["row"])
names(rnode[[1]][["row"]])
xmlValue(tgt[[1]])
xmlValue(tgt[["zipcode"]])
tgt <- rnode[[1]][[1]]
tgt
tgt <- rnode[[1]][["row"]]
tgt
tgt <- rnode[[1]]
tgt
tgt <- rnode[[1]]
xmlValue(tgt[["zipcode"]])
names(tgt)
xmlValue(tgt[["row"]])
names(tgt[["row"]])
xmlSApply(tgt, xmlValue)
tgt <- rnode[[1]][["row"]]
xmlSApply(tgt, xmlValue)
tgt <- rnode[[1]][["zipcode"]]
xmlSApply(tgt, xmlValue)
names(tgt)
names(rnode)
names(rnode[["row"]])
names(rnode[["row"]]["row"])
names(rnode[["row"]][["row"]])
tgt <- rnode[["row"]]
xmlSApply(tgt, xmlValue)
xmlSApply(tgt, names)
xmlSApply(tgt, xmlValue)
xmlSApply(tgt, names)
tgt <- rnode[["row"]][[zipcode]]
xmlSApply(tgt, names)
tgt <- rnode[["row"]][[2]]
xmlSApply(tgt, names)
xmlSApply(tgt["zipcode"], names)
XMLNodeList(rnode)
xpathSApply(rnode)
nodes <- getNodeSet(rnode, "//row/row[@zipcode='21231'")
nodes <- getNodeSet(rnode, "//row/row[@zipcode='21231']")
nodes
lapply(nodes, function(x) xmlSApply(x, count))
lapply(nodes, function(x) xmlSApply(x))
lapply(nodes, xmlValue)
tgt <- rnode[["row"]][["row"]][["zipcode"]]
tgt
tgt <- rnode[["row"]][["row"]]
xmlSApply(tgt[["zipcode"]], xmlValue)
zips <- xmlSApply(tgt[["zipcode"]], xmlValue)
zips
zips <- xmlSApply(tgt, xmlValue)
zips
tgt <- rnode[["row"]]
zips <- xmlSApply(tgt, xmlValue)
zips
zips <- xmlSApply(tgt[[1]], xmlValue)
zips
zips <- xmlSApply(tgt[[1]][[2]], xmlValue)
zips
zips <- xmlApply(tgt[[1]][[2]], xmlValue)
zips
zips <- xmlApply(tgt[[2]][[2]], xmlValue)
zips
length(tgt)
nrow(target)
nrow(tgt)
count(tgt)
tgt
tgt[[]]
names(tgt)
length(names(tgt))
as.numeric(tgt[[1]][[2]])
as.numeric(tgt[[1]][[2]][[2]])
as.numeric(tgt[[1]][[2]])
tgt[[1]][[2]]
tgt[[1]][["zipcode"]]
xmlValue(tgt[[1]][[2]])
x <- data.frame()
for (i in 1:length(names(tgt))){
x[i] <- as.numeric(xmlValue(tgt[[i]][[2]]))
}
x <- data.frame()
for (i in 1:length(names(tgt))){
x <- rbind(x, as.numeric(xmlValue(tgt[[i]][[2]])))
}
table(x)
table(x)
url4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url4, mode="wt")
download.file(url4, destfile="survey.csv", mode="wt")
library(data.table)
DT <- fread("survey.csv")
times <- vector()
times[1] <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
x <- vector()
x[1] <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
install.packages("devtools")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library(RMySQL)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
url4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
gdp <- read.csv(url4, skip=3, na.strings = ".. Not available.  ")
edu <- read.csv(url5)
gdp <- gdp[2:232,]
library(dplyr)
gdp <- rename(gdp, CountryCode=X, USD=US.dollars.)
gdp <- select(gdp, CountryCode, Ranking, Economy, USD)
x <- intersect(unique(levels(gdp$CountryCode)), unique(levels(edu$CountryCode)))
length(x)
gdp <- gdp[1:190,]
gdp <- mutate(gdp, ranknum=as.numeric(as.character(Ranking)))
arr <- arrange(gdp, desc(ranknum))
arr[13]
arr[13,]
names(arr)
head(arr)
head(gdp)
head(Edu)
head(edu)
gdp <- read.csv(url4, skip=3, na.strings = ".. Not available.  ")
edu <- read.csv(url5)
gdp <- gdp[2:232,]
names(gdp)
head(gdp)
names(edu)
gdp <- rename(gdp, CountryCode=X, USD=US.dollars.)
combined <- plyr::join(gdp, edu)
nrow(combined)
names(combined)
head(combined)
class(combined$ranking)
class(combined$Ranking)
combined <- mutate(combined, ranknum=as.numeric(as.character(Ranking)))
dt.c <- as.data.table(combined)
library(data.table)
dt.c <- as.data.table(combined)
dt.c[, lapply(ranknum, mean), by = "Income.Group"]
dt.c[, mean(ranknum), by = "Income.Group"]
dt.c[, mean(ranknum, na.rm=TRUE), by = "Income.Group"]
?quantile
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
dt.c[, gdp.fac:=cut2(ranknum, groups=5)]
?cut2
dt.c[, gdp.fac:=cut2(ranknum, g=5)]
dt.c[,ranknum]
dt.c[,gdp.fac]
table(dt.c$gdp.fac, dt.c$Income.Group)
url1 <- "https://s3.amazonaws.com/coursera-uploads/user-38001ad6a34ab90942e72fdd/973497/asst-3/0cef27c0a4a011e4bb36752a6296e791.txt"
?read.table
x1 <- read.table(url1, header=TRUE)
head(x1)
url2 <- "https://s3.amazonaws.com/coursera-uploads/user-327092b4f32d6c68057acee8/973497/asst-3/ab112010a4a411e49deb57f90ab7b90d.txt"
x2 <- read.table(url2, header=TRUE)
head(x2)
url3 <- "https://s3.amazonaws.com/coursera-uploads/user-07babd1eee70bc12be9a72a5/973497/asst-3/aeb29080a4a311e49e96f78ae7390c5d.txt"
x3 <- read.table(yrl3, header=TRUE)
x3 <- read.table(url3, header=TRUE)
head(x3)
url4 <- "https://s3.amazonaws.com/coursera-uploads/user-4cebba9b9c5a94f849e431d2/973497/asst-3/2044e9a0a49f11e494008734ab201470.txt"
x4 <- read.table(url4, header=TRUE)
head(x4)
mdy(10301978)
library(lubridate)
mdy(10301978)
dmy(10301978)
dmy("10301978")
dmy("10/30/1978")
dmy(10/30/1978)
library(airquality)
library(datasets
)
data(airquality)
library(ggplot2)
qplot(Windspeed, Ozone, data=airquality, facets=.~factor(Month))
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("ggthemes")
?variable
??variable
sessionInfo()
?file.exists
fn <- "stormdata.csv"
file.exists(fn)
setwd(./..)
setwd("./..")
setwd("./GitHub//noaastormdata")
file.exists(fn)
if(!file.exists(fn) (download.file(url, fn, mode="wb")
)
if(!file.exists(fn)) (download.file(url, fn, mode="wb")
)
if(!file.exists(fn)) download.file(url, fn, mode="wb")
toDTG()
toDTG <- function(date, time){
x <- strsplit(as.character(date), " ")[[1]][1]
if(nchar(time)<4){
y.t <- paste0("0", substr(time, 0, 4), sep="")
y <- paste(substr(y.t, 0, 2), substr(y.t, 3, 4), sep=":")
} else if(nchar(time)==4){
y <- paste(substr(time, 0, 2), substr(time, 3, 4), sep=":")
} else {
y <- substr(time, 0, 8)
}
dt <- paste(x, y, sep=" ")
dtg <- as.POSIXct(dt, format="%m/%d/%Y %H:%M", tz="UTC")
return(dtg)
}
ls()
library(data.table)
library(R.utils)
library(ggplot2)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!file.exists(fn)) download.file(url, fn, mode="wb")
if(!file.exists(fn)) bunzip2("stormdata.bz2", fn, remove=FALSE)
storm <- read.csv(fn)
ls()
dt1 <- data.table(storm)
setnames(dt1, tolower(names(dt1)))
to.keep <- c("state", "evtype", "bgn_date", "bgn_time", "mag", "fatalities", "injuries", "propdmg", "propdmgexp", "cropdmg", "cropdmgexp")
dt2 <- dt1[, to.keep, with=FALSE] #new table with only selected columns
dt2[, dtg:=toDTG(bgn_date, bg_time)]
dt2[, dtg:=toDTG(bgn_date, bgn_time)]
toDTG <- function(date, time){
x <- strsplit(as.character(date), " ")[[1]][1]
if(nchar(as.character(time))<4){
y.t <- paste0("0", substr(time, 0, 4), sep="")
y <- paste(substr(y.t, 0, 2), substr(y.t, 3, 4), sep=":")
} else if(nchar(as.character(time))==4){
y <- paste(substr(time, 0, 2), substr(time, 3, 4), sep=":")
} else {
y <- substr(time, 0, 8)
}
dt <- paste(x, y, sep=" ")
dtg <- as.POSIXct(dt, format="%m/%d/%Y %H:%M", tz="UTC")
return(dtg)
}
dt2[, dtg:=toDTG(bgn_date, bgn_time)]
head(dt2)
head(dt)
head(dt1)
dt1 <- dt2
head(dt1)
rm(dt2)
ls
ls()
dt1[, c(bgn_date, bgn_time):=NULL]
head(dt1$dgn_Date)
head(dt1$dgn_date)
head(dt1$bgn_date)
dt1[, c(bgn_date, bgn_time):=NULL]
dt1[, bgn_date:=NULL]
dt1[, bgn_time:=NULL]
names(dt1)
setkey(dt1, state, dtg)
names(dt1)
keys()
class(dt)
class(dt1)
str(dt1)
rm(storm)
dt1[, which.max(mean(fatalities)), by=evtype]
head(dt1[, mean(fatalities), by=evtype])
which.max(head(dt1[, mean(fatalities), by=evtype]))$V1
(head(dt1[, sum(fatalities), by=evtype]))
killed <- dt1[, sum(fatalities), by=evtype]
injured <- dt1[, sum(fatalities), by=evtype]
which.max(killed$V1)
killed[which.max(killed$V1), 2]
killed[which.max(killed$V1), 2, with=FALSE]
killed[which.max(killed$V1), 1, with=FALSE]
killed[which.max(killed$V1)]
killed[which.max(killed$V1)]
injured <- dt1[, sum(fatalities), by=evtype]
injured[which.max(injured$V1)] #summed by event type over all years
injured <- dt1[, sum(injuries), by=evtype]
injured[which.max(injured$V1)] #summed by event type over all years
k1 <- killed[which.max(killed$V1)] #summed by event type over all years
i1 <- injured[which.max(injured$V1)] #summed by event type over all years
k1
k1[2]
k1[, 2]
k1[, 2, with=FALSE]
k1$V1
k1$V1[1]
k1$V1[[1]]
k1$V1[[1]][1]
head(dt1)
head(dt1$dtg, 50)
head(dt1$dtg, 500)
ls()
suppress.messages(library(data.table))
suppressMessages(library(data.table))
ls() %in% "storm"
ls()
ls() %in% "dt1"
if(ls() %in% "dt1") print("here")
any()
if(any(ls() %in% "dt1") print("here")
if(any(ls() %in% "dt1")) print("here")
if(!any(ls() %in% "dt1")) print("here")
update.packages()
ls()
kiva <- dt1[, sum(fatalities), by=list(evtype, year)]
head(dt1)
library(data.table)
library(R.utils)
library(ggplot2)
getwd()
